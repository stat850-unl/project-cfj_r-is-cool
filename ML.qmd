---
title: "ML_FIFA WORLD CUP"
format: html
editor: visual
---

```{r}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(randomForest)
library(rsample) 
library(spatialRF)
library(randomForestExplainer)
#library(Rcpp)
library(recipes)
library(tidymodels)
fifa_data <- read.csv("players_20.csv")
player_rate <- fifa_data %>% select( ,11,32:37)
player_rate <- na.omit(player_rate)
```

### 1. Which of the six compositions contribute largely to the OVR of the players? 

```{r}
### this random forest analysis takes not less than 30min to run
### I have to do this because the rshiny app is not working for a reason I do not know. 
set.seed(1234)
ctrl <- trainControl(method = "cv",  number = 10)
co_split <- initial_split(player_rate, prop = .7)
co_train <- training(co_split)
nrow(co_train)
co_test <- testing(co_split)
nrow(co_test)



data_recipe<-recipe(overall   ~ ., 
                data = co_train) %>%
  step_impute_knn(all_predictors()) %>%
step_center(all_numeric_predictors()) %>%
  step_scale(all_numeric_predictors())
# process the traing set/ prepare recipe(non-cv)
data_prep <-data_recipe %>% prep(training = co_train, retain = TRUE)


rf_model<-rand_forest(trees = 500, mtry = 6, mode = "regression") %>% set_engine("randomForest",importance=T, localImp = T, ) %>% fit(overall   ~ ., data = juice(data_prep))

impt_frame<-measure_importance(rf_model$fit)
impt_frame[order(-impt_frame$node_purity_increase), , drop = FALSE]

md_frame <- min_depth_distribution(rf_model$fit)

# IncNodePurity
imp.rf <- measure_importance(rf_model$fit) %>%
  as.data.frame() %>%
 rownames_to_column("Variable") %>%
  arrange(node_purity_increase)
#imp.rf


plot_min_depth_distribution(md_frame, mean_sample = "top_trees")
imp.rf %>%
  mutate(Variable = factor(variable, levels = reorder(variable, node_purity_increase))) %>%
  ggplot(aes(x = node_purity_increase, y = reorder(variable, +node_purity_increase), fill = variable)) +
  geom_bar(stat = "identity") +
  theme_bw() +
  theme(aspect.ratio = 1,
        legend.position = "none",
        axis.text.y = element_text(size = 16,
                                   face = "bold")
  ) +
  scale_y_discrete("") +
  scale_x_continuous("Inc Node Purity")

#Identifying potential interactions
vars<- important_variables(measure_importance(rf_model$fit), k = 6)



forest <- randomForest::randomForest(overall   ~ ., data = bake(data_prep, new_data = co_train), localImp = TRUE, importance=T, ntree = 100, mtry = 6, type= "regression")

```

*Blas M. Benito (2021). spatialRF: Easy Spatial Regression with Random Forest. R package version 1.1.0. doi: 10.5281/zenodo.4745208. url:Â <https://blasbenito.github.io/spatialRF/>*

```{r}
spatialRF::plot_training_df(
  data = player_rate,
  dependent.variable.name = "overall",
  predictor.variable.names = colnames(player_rate)[2:7],
  ncol = 3,
  point.color = viridis::viridis(100, option = "F"),
  line.color = "gray30",
  method = "gam"
  )


```

## 2. Does the preferred foot of the players matter when it comes to players performance? 

```{r}
library(ggstatsplot)
library(tidyverse)
fifa_data <- read.csv("players_20.csv")

PF <- ggbetweenstats(
  data = fifa_data,
  x = preferred_foot,
  y = overall,
  bf.message = TRUE
) + labs(
    x = "Preferred foot",
    y = "Overall rating"
  ) +
  theme(
    axis.ticks = element_blank(),
    axis.line = element_line(colour = "grey50"),
    panel.grid = element_line(color = "#b4aea9"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dashed"),
    panel.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
    plot.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4")
  )

```

### 3. Does the international reputation of the players corresponds to the OVR of the players? 

```{r}
library(PMCMRplus)
ggbetweenstats(
  data = fifa_data,
  x = international_reputation,
  y = overall,
  pairwise.comparisons = F,
  bf.message = TRUE
) + labs(
    x = "International reputation (Star)",
    y = "Overall rating"
  ) +
  theme(
    axis.ticks = element_blank(),
    axis.line = element_line(colour = "grey50"),
    panel.grid = element_line(color = "#b4aea9"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dashed"),
    panel.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
    plot.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4")
  )
```

### 4. How much effect do the WFS rating have on the players OVR? 

```{r}
library(rstantools)
ggbetweenstats(
  data = fifa_data,
  x = weak_foot,
  y = overall,
  pairwise.comparisons = F,
  bf.message = TRUE
) + labs(
    x = "Weak foot Skill (star)",
    y = "Overall rating"
  ) +
  theme(
    axis.ticks = element_blank(),
    axis.line = element_line(colour = "grey50"),
    panel.grid = element_line(color = "#b4aea9"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dashed"),
    panel.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
    plot.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4")
  )

```

### 5. Does the players SM matter in the OVR of the players? 

```{r}
ggbetweenstats(
  data = fifa_data,
  x = skill_moves,
  y = overall,
  pairwise.comparisons = F,
  bf.message = TRUE
) + labs(
    x = "Skill moves (star)",
    y = "Overall rating"
  ) +
  theme(
    axis.ticks = element_blank(),
    axis.line = element_line(colour = "grey50"),
    panel.grid = element_line(color = "#b4aea9"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dashed"),
    panel.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
    plot.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4")
  )
```

### 6. How does the combination of the players working rating (i.e., attacking working rate/defensive working rate) contribute to the OVR?

```{r}
ggbetweenstats(
  data = fifa_data,
  x = work_rate,
  y = overall,
  pairwise.comparisons = F,
  palette = "Spectral",
  bf.message = F
) + labs(
    x = "Working rate",
    y = "Overall rating"
  ) +
  theme(
    axis.ticks = element_blank(),
    axis.line = element_line(colour = "grey50"),
    panel.grid = element_line(color = "#b4aea9"),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dashed"),
    panel.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
    plot.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4")
  )

#View(paletteer::palettes_d_names)
```

### Just some test analysis- not necessary 

```{r}
install.packages("ggfortify")
library(plotly)
library(ggfortify)
pc_data <- fifa_data %>% select(,16,17,25,11,32:37)
pc_data <- na.omit(pc_data)
pc_data<-  pc_data %>% filter(!team_position == "")
#pc_data %>% remove_rownames %>% column_to_rownames(var="team_position")

rate.pca <- prcomp(pc_data[,c(5:10)], center = T,scale. = T)

components <- data.frame(rate.pca[["x"]])

components <- cbind(components, pc_data$team_position)

components$PC2 <- -components$PC2
explained_variance <- summary(rate.pca)[["sdev"]]
explained_variance <- explained_variance[1:2]
comp <- rate.pca[["rotation"]]
comp[,'PC2'] <- - comp[,'PC2']
loadings <- comp
for (i in seq(explained_variance)){
  loadings[,i] <- comp[,i] * explained_variance[i]
}

features = c(unique(pc_data$team_position))

fig <- plot_ly(components, x = ~PC1, y = ~PC2, color = ~pc_data$team_position, type = 'scatter', mode = 'markers') %>%
  layout(
    legend=list(title=list(text='color')),
    plot_bgcolor = "#e5ecf6",
    xaxis = list(
      title = "0"),
    yaxis = list(
      title = "1"))
for (i in seq(4)){
  fig <- fig %>%
    add_segments(x = 0, xend = loadings[i, 1], y = 0, yend = loadings[i, 2], line = list(color = 'black'),inherit = FALSE, showlegend = FALSE) %>%
    add_annotations(x=loadings[i, 1], y=loadings[i, 2], ax = 0, ay = 0,text = features[i], xanchor = 'center', yanchor= 'bottom')
}

autoplot(rate.pca, data = pc_data, colour = "team_position", loadings = T, loadings.colour = 'blue', loadings.label = TRUE, loadings.label.size = 4, loadings.label.colour='black') + theme_linedraw()


autoplot(rate.pca, data = pc_data, colour = "international_reputation", loadings = T, loadings.colour = 'blue', loadings.label = TRUE, loadings.label.size = 4, loadings.label.colour='red') + theme_linedraw()

autoplot(rate.pca, data = pc_data, colour = "preferred_foot", loadings = T, loadings.colour = 'blue', loadings.label = TRUE, loadings.label.size = 4, loadings.label.colour='black') + theme_linedraw()
```

## 
